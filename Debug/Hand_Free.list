
Hand_Free.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000938  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000acc  08000acc  00010acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000adc  08000adc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000adc  08000adc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000adc  08000adc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000adc  08000adc  00010adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ae0  08000ae0  00010ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000138a8  20000004  08000ae8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200138ac  08000ae8  000238ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002154  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000085f  00000000  00000000  00022188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  000229e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000178  00000000  00000000  00022bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dfa0  00000000  00000000  00022d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000330b  00000000  00000000  00030cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004e000  00000000  00000000  00033ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00081ffb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000534  00000000  00000000  0008204c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000ab4 	.word	0x08000ab4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000ab4 	.word	0x08000ab4

080001d4 <Audio_Adc_Init>:



/****with GPIOC [C0] as analog [ADC1_IN10}****/
void Audio_Adc_Init(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0

	/***********init gpioc as analog*************/
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN ;
 80001d8:	4b58      	ldr	r3, [pc, #352]	; (800033c <Audio_Adc_Init+0x168>)
 80001da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001dc:	4a57      	ldr	r2, [pc, #348]	; (800033c <Audio_Adc_Init+0x168>)
 80001de:	f043 0304 	orr.w	r3, r3, #4
 80001e2:	6313      	str	r3, [r2, #48]	; 0x30
	/*select direction of gpio as analog mode(11)*/
	GPIOC->MODER &= ~GPIO_MODER_MODE0  ;
 80001e4:	4b56      	ldr	r3, [pc, #344]	; (8000340 <Audio_Adc_Init+0x16c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a55      	ldr	r2, [pc, #340]	; (8000340 <Audio_Adc_Init+0x16c>)
 80001ea:	f023 0303 	bic.w	r3, r3, #3
 80001ee:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODE0   ;
 80001f0:	4b53      	ldr	r3, [pc, #332]	; (8000340 <Audio_Adc_Init+0x16c>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a52      	ldr	r2, [pc, #328]	; (8000340 <Audio_Adc_Init+0x16c>)
 80001f6:	f043 0303 	orr.w	r3, r3, #3
 80001fa:	6013      	str	r3, [r2, #0]
	/* Select no pull (reset state)  */
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR0;
 80001fc:	4b50      	ldr	r3, [pc, #320]	; (8000340 <Audio_Adc_Init+0x16c>)
 80001fe:	68db      	ldr	r3, [r3, #12]
 8000200:	4a4f      	ldr	r2, [pc, #316]	; (8000340 <Audio_Adc_Init+0x16c>)
 8000202:	f023 0303 	bic.w	r3, r3, #3
 8000206:	60d3      	str	r3, [r2, #12]

	/********init continues reguler ADC1  ********/
		  /* Enable ADC1 clock */
		    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000208:	4b4c      	ldr	r3, [pc, #304]	; (800033c <Audio_Adc_Init+0x168>)
 800020a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800020c:	4a4b      	ldr	r2, [pc, #300]	; (800033c <Audio_Adc_Init+0x168>)
 800020e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000212:	6453      	str	r3, [r2, #68]	; 0x44
		  /*Resolution 12bit (00)(15cycle for one sample)*/
		   ADC1->CR1 &= ~ADC_CR1_RES;
 8000214:	4b4b      	ldr	r3, [pc, #300]	; (8000344 <Audio_Adc_Init+0x170>)
 8000216:	685b      	ldr	r3, [r3, #4]
 8000218:	4a4a      	ldr	r2, [pc, #296]	; (8000344 <Audio_Adc_Init+0x170>)
 800021a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800021e:	6053      	str	r3, [r2, #4]
		   /* Enable ADC */
		   ADC1->CR2 |= ADC_CR2_ADON;
 8000220:	4b48      	ldr	r3, [pc, #288]	; (8000344 <Audio_Adc_Init+0x170>)
 8000222:	689b      	ldr	r3, [r3, #8]
 8000224:	4a47      	ldr	r2, [pc, #284]	; (8000344 <Audio_Adc_Init+0x170>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6093      	str	r3, [r2, #8]

		   /* Select external event for regular group [1000]: Timer 3 TRGO event*/
		   ADC1->CR2 &= ~ADC_CR2_EXTSEL;
 800022c:	4b45      	ldr	r3, [pc, #276]	; (8000344 <Audio_Adc_Init+0x170>)
 800022e:	689b      	ldr	r3, [r3, #8]
 8000230:	4a44      	ldr	r2, [pc, #272]	; (8000344 <Audio_Adc_Init+0x170>)
 8000232:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000236:	6093      	str	r3, [r2, #8]
		   ADC1->CR2 |= (ADC_CR2_EXTSEL_3);
 8000238:	4b42      	ldr	r3, [pc, #264]	; (8000344 <Audio_Adc_Init+0x170>)
 800023a:	689b      	ldr	r3, [r3, #8]
 800023c:	4a41      	ldr	r2, [pc, #260]	; (8000344 <Audio_Adc_Init+0x170>)
 800023e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000242:	6093      	str	r3, [r2, #8]

		   /* Select ADC1_IN110 regular */
		    ADC1->SQR1 &= ~ADC_SQR1_L;
 8000244:	4b3f      	ldr	r3, [pc, #252]	; (8000344 <Audio_Adc_Init+0x170>)
 8000246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000248:	4a3e      	ldr	r2, [pc, #248]	; (8000344 <Audio_Adc_Init+0x170>)
 800024a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800024e:	62d3      	str	r3, [r2, #44]	; 0x2c
		    ADC1->SQR3 &= ~ADC_SQR3_SQ1;
 8000250:	4b3c      	ldr	r3, [pc, #240]	; (8000344 <Audio_Adc_Init+0x170>)
 8000252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000254:	4a3b      	ldr	r2, [pc, #236]	; (8000344 <Audio_Adc_Init+0x170>)
 8000256:	f023 031f 	bic.w	r3, r3, #31
 800025a:	6353      	str	r3, [r2, #52]	; 0x34
		    ADC1->SQR3 |= (ADC_SQR3_SQ1_1 | ADC_SQR3_SQ1_3);
 800025c:	4b39      	ldr	r3, [pc, #228]	; (8000344 <Audio_Adc_Init+0x170>)
 800025e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000260:	4a38      	ldr	r2, [pc, #224]	; (8000344 <Audio_Adc_Init+0x170>)
 8000262:	f043 030a 	orr.w	r3, r3, #10
 8000266:	6353      	str	r3, [r2, #52]	; 0x34
		   /* Continuous DMA requests */
		    ADC1->CR2 |= ADC_CR2_DDS;
 8000268:	4b36      	ldr	r3, [pc, #216]	; (8000344 <Audio_Adc_Init+0x170>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	4a35      	ldr	r2, [pc, #212]	; (8000344 <Audio_Adc_Init+0x170>)
 800026e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000272:	6093      	str	r3, [r2, #8]

		   /* Enable DMA mode in ADC */
		    ADC1->CR2 |= ADC_CR2_DMA;
 8000274:	4b33      	ldr	r3, [pc, #204]	; (8000344 <Audio_Adc_Init+0x170>)
 8000276:	689b      	ldr	r3, [r3, #8]
 8000278:	4a32      	ldr	r2, [pc, #200]	; (8000344 <Audio_Adc_Init+0x170>)
 800027a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800027e:	6093      	str	r3, [r2, #8]

	/*********init DMA 2***************/
	/* Enable DMA clock in RCC */
	  RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000280:	4b2e      	ldr	r3, [pc, #184]	; (800033c <Audio_Adc_Init+0x168>)
 8000282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000284:	4a2d      	ldr	r2, [pc, #180]	; (800033c <Audio_Adc_Init+0x168>)
 8000286:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800028a:	6313      	str	r3, [r2, #48]	; 0x30
	/*chech it is disabled*/
	if(DMA_SxCR_EN ==(DMA2_Stream0->CR & DMA_SxCR_EN))
 800028c:	4b2e      	ldr	r3, [pc, #184]	; (8000348 <Audio_Adc_Init+0x174>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f003 0301 	and.w	r3, r3, #1
 8000294:	2b01      	cmp	r3, #1
 8000296:	d10c      	bne.n	80002b2 <Audio_Adc_Init+0xde>
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_EN ;  //disable stream before configuration
 8000298:	4b2b      	ldr	r3, [pc, #172]	; (8000348 <Audio_Adc_Init+0x174>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a2a      	ldr	r2, [pc, #168]	; (8000348 <Audio_Adc_Init+0x174>)
 800029e:	f023 0301 	bic.w	r3, r3, #1
 80002a2:	6013      	str	r3, [r2, #0]
		while(DMA_SxCR_EN ==(DMA2_Stream0->CR & DMA_SxCR_EN))
 80002a4:	bf00      	nop
 80002a6:	4b28      	ldr	r3, [pc, #160]	; (8000348 <Audio_Adc_Init+0x174>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f003 0301 	and.w	r3, r3, #1
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d0f9      	beq.n	80002a6 <Audio_Adc_Init+0xd2>
	else
	{
	}

	/* Select the DMA channel 0 in CHSEL[2:0] in the DMA_SxCR */
	  DMA2_Stream0->CR &= ~DMA_SxCR_CHSEL;
 80002b2:	4b25      	ldr	r3, [pc, #148]	; (8000348 <Audio_Adc_Init+0x174>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a24      	ldr	r2, [pc, #144]	; (8000348 <Audio_Adc_Init+0x174>)
 80002b8:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80002bc:	6013      	str	r3, [r2, #0]
	  /* Select stream priority very high */
	  DMA2_Stream0->CR |= DMA_SxCR_PL;
 80002be:	4b22      	ldr	r3, [pc, #136]	; (8000348 <Audio_Adc_Init+0x174>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a21      	ldr	r2, [pc, #132]	; (8000348 <Audio_Adc_Init+0x174>)
 80002c4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80002c8:	6013      	str	r3, [r2, #0]
	  /* Select the data transfer direction peripheral(ADC)-to-memory */
	  DMA2_Stream0->CR &= ~DMA_SxCR_DIR;
 80002ca:	4b1f      	ldr	r3, [pc, #124]	; (8000348 <Audio_Adc_Init+0x174>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a1e      	ldr	r2, [pc, #120]	; (8000348 <Audio_Adc_Init+0x174>)
 80002d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80002d4:	6013      	str	r3, [r2, #0]
	  /* Select memory and peripherals sizes 2 bytes for buffer register type it is uint16_t*/
	  DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0;
 80002d6:	4b1c      	ldr	r3, [pc, #112]	; (8000348 <Audio_Adc_Init+0x174>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	4a1b      	ldr	r2, [pc, #108]	; (8000348 <Audio_Adc_Init+0x174>)
 80002dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002e0:	6013      	str	r3, [r2, #0]
	  DMA2_Stream0->CR |= DMA_SxCR_PSIZE_0;
 80002e2:	4b19      	ldr	r3, [pc, #100]	; (8000348 <Audio_Adc_Init+0x174>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a18      	ldr	r2, [pc, #96]	; (8000348 <Audio_Adc_Init+0x174>)
 80002e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002ec:	6013      	str	r3, [r2, #0]
	  /* Select FIFO mode */
	  DMA2_Stream0->FCR |= DMA_SxFCR_DMDIS;
 80002ee:	4b16      	ldr	r3, [pc, #88]	; (8000348 <Audio_Adc_Init+0x174>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a15      	ldr	r2, [pc, #84]	; (8000348 <Audio_Adc_Init+0x174>)
 80002f4:	f043 0304 	orr.w	r3, r3, #4
 80002f8:	6153      	str	r3, [r2, #20]
	  /* Select FIFO threshold level half FIFO */
	  DMA2_Stream0->FCR |= (DMA_SxFCR_FTH_0 | DMA_SxFCR_FTH_1);
 80002fa:	4b13      	ldr	r3, [pc, #76]	; (8000348 <Audio_Adc_Init+0x174>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a12      	ldr	r2, [pc, #72]	; (8000348 <Audio_Adc_Init+0x174>)
 8000300:	f043 0303 	orr.w	r3, r3, #3
 8000304:	6153      	str	r3, [r2, #20]
	  /* Select memory incremented mode, peripheral shall has fixed address */
	  DMA2_Stream0->CR |= DMA_SxCR_MINC;
 8000306:	4b10      	ldr	r3, [pc, #64]	; (8000348 <Audio_Adc_Init+0x174>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a0f      	ldr	r2, [pc, #60]	; (8000348 <Audio_Adc_Init+0x174>)
 800030c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000310:	6013      	str	r3, [r2, #0]
	  /* Enable DMA transfer complete interrupt */
	  DMA2_Stream0->CR |= DMA_SxCR_TCIE;
 8000312:	4b0d      	ldr	r3, [pc, #52]	; (8000348 <Audio_Adc_Init+0x174>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	4a0c      	ldr	r2, [pc, #48]	; (8000348 <Audio_Adc_Init+0x174>)
 8000318:	f043 0310 	orr.w	r3, r3, #16
 800031c:	6013      	str	r3, [r2, #0]
	  /* Set peripheral address */
	  DMA2_Stream0->PAR = (uint32_t)&ADC1->DR;
 800031e:	4b0a      	ldr	r3, [pc, #40]	; (8000348 <Audio_Adc_Init+0x174>)
 8000320:	4a0a      	ldr	r2, [pc, #40]	; (800034c <Audio_Adc_Init+0x178>)
 8000322:	609a      	str	r2, [r3, #8]
	  /* Set memory address */
	  DMA2_Stream0->M0AR = (uint32_t)Name_Buffer;
 8000324:	4b08      	ldr	r3, [pc, #32]	; (8000348 <Audio_Adc_Init+0x174>)
 8000326:	4a0a      	ldr	r2, [pc, #40]	; (8000350 <Audio_Adc_Init+0x17c>)
 8000328:	60da      	str	r2, [r3, #12]
	  /* Set number of data items */
	  DMA2_Stream0->NDTR =40000;
 800032a:	4b07      	ldr	r3, [pc, #28]	; (8000348 <Audio_Adc_Init+0x174>)
 800032c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8000330:	605a      	str	r2, [r3, #4]

}
 8000332:	bf00      	nop
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	40023800 	.word	0x40023800
 8000340:	40020800 	.word	0x40020800
 8000344:	40012000 	.word	0x40012000
 8000348:	40026410 	.word	0x40026410
 800034c:	4001204c 	.word	0x4001204c
 8000350:	20000024 	.word	0x20000024

08000354 <Audio_Timer_Init>:

/*******[Timer 3 TRGO event]************/

void Audio_Timer_Init(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0

	/*  configuration of clock */
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN ;
 8000358:	4b14      	ldr	r3, [pc, #80]	; (80003ac <Audio_Timer_Init+0x58>)
 800035a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800035c:	4a13      	ldr	r2, [pc, #76]	; (80003ac <Audio_Timer_Init+0x58>)
 800035e:	f043 0302 	orr.w	r3, r3, #2
 8000362:	6413      	str	r3, [r2, #64]	; 0x40
	/*up_counter*/
	TIM3->CR1 &= ~TIM_CR1_DIR;
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <Audio_Timer_Init+0x5c>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a11      	ldr	r2, [pc, #68]	; (80003b0 <Audio_Timer_Init+0x5c>)
 800036a:	f023 0310 	bic.w	r3, r3, #16
 800036e:	6013      	str	r3, [r2, #0]
	/* Set timer Pre_scaler, bus clock = 42 MHz, Tim_Clock = 84 MHz   if the prescaler isnot set to (1)
	   * the bus timer clock is twice of the APB1 bus clock
	   * fCK_PSC / (PSC[15:0] + 1)
	   * CK_CNT = 84000000 / (83 + 1) -> 1000000 Hz -> time base = 1 us */
	 TIM3->PSC =83;
 8000370:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <Audio_Timer_Init+0x5c>)
 8000372:	2253      	movs	r2, #83	; 0x53
 8000374:	629a      	str	r2, [r3, #40]	; 0x28
	 /*overflow occur 125us */
 	 TIM3->ARR = 125;
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <Audio_Timer_Init+0x5c>)
 8000378:	227d      	movs	r2, #125	; 0x7d
 800037a:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Timer2 as master (update:010) for triggering of adc1*/
	TIM3->CR2 &= ~TIM_CR2_MMS;
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <Audio_Timer_Init+0x5c>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <Audio_Timer_Init+0x5c>)
 8000382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000386:	6053      	str	r3, [r2, #4]
	TIM3->CR2 |= TIM_CR2_MMS_1 ;
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <Audio_Timer_Init+0x5c>)
 800038a:	685b      	ldr	r3, [r3, #4]
 800038c:	4a08      	ldr	r2, [pc, #32]	; (80003b0 <Audio_Timer_Init+0x5c>)
 800038e:	f043 0320 	orr.w	r3, r3, #32
 8000392:	6053      	str	r3, [r2, #4]

	 /* Enable TIM3 counter */
	TIM3->CR1 |= TIM_CR1_CEN;
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <Audio_Timer_Init+0x5c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <Audio_Timer_Init+0x5c>)
 800039a:	f043 0301 	orr.w	r3, r3, #1
 800039e:	6013      	str	r3, [r2, #0]


}
 80003a0:	bf00      	nop
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	40023800 	.word	0x40023800
 80003b0:	40000400 	.word	0x40000400

080003b4 <Audio_Process>:




void Audio_Process(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	 switch(State)
 80003b8:	4b1c      	ldr	r3, [pc, #112]	; (800042c <Audio_Process+0x78>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b02      	cmp	r3, #2
 80003be:	d019      	beq.n	80003f4 <Audio_Process+0x40>
 80003c0:	2b02      	cmp	r3, #2
 80003c2:	dc2b      	bgt.n	800041c <Audio_Process+0x68>
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d02b      	beq.n	8000420 <Audio_Process+0x6c>
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d000      	beq.n	80003ce <Audio_Process+0x1a>
	 			 //nothing
	 		 }
	 		 break;

	 	default:
	 		break;
 80003cc:	e026      	b.n	800041c <Audio_Process+0x68>
		     Gpio_on(Red_Led);
 80003ce:	2001      	movs	r0, #1
 80003d0:	f000 f8e0 	bl	8000594 <Gpio_on>
	 		 DMA2_Stream0->CR |= DMA_SxCR_EN;
 80003d4:	4b16      	ldr	r3, [pc, #88]	; (8000430 <Audio_Process+0x7c>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a15      	ldr	r2, [pc, #84]	; (8000430 <Audio_Process+0x7c>)
 80003da:	f043 0301 	orr.w	r3, r3, #1
 80003de:	6013      	str	r3, [r2, #0]
	 		 ADC1->CR2 |= ADC_CR2_EXTEN_0;
 80003e0:	4b14      	ldr	r3, [pc, #80]	; (8000434 <Audio_Process+0x80>)
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	4a13      	ldr	r2, [pc, #76]	; (8000434 <Audio_Process+0x80>)
 80003e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ea:	6093      	str	r3, [r2, #8]
			 State=recordname_Playing;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	; (800042c <Audio_Process+0x78>)
 80003ee:	2202      	movs	r2, #2
 80003f0:	701a      	strb	r2, [r3, #0]
			 break;
 80003f2:	e018      	b.n	8000426 <Audio_Process+0x72>
	 		 if(recordingFinished==1)
 80003f4:	4b10      	ldr	r3, [pc, #64]	; (8000438 <Audio_Process+0x84>)
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d113      	bne.n	8000424 <Audio_Process+0x70>
	 			  ADC1->CR2 &= ~ADC_CR2_EXTEN;
 80003fc:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <Audio_Process+0x80>)
 80003fe:	689b      	ldr	r3, [r3, #8]
 8000400:	4a0c      	ldr	r2, [pc, #48]	; (8000434 <Audio_Process+0x80>)
 8000402:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000406:	6093      	str	r3, [r2, #8]
	 			  Gpio_off(Red_Led);
 8000408:	2001      	movs	r0, #1
 800040a:	f000 f8df 	bl	80005cc <Gpio_off>
	 			  recordingFinished = 0;
 800040e:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <Audio_Process+0x84>)
 8000410:	2200      	movs	r2, #0
 8000412:	701a      	strb	r2, [r3, #0]
	 			  State=idle_state;
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <Audio_Process+0x78>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	 		 break;
 800041a:	e003      	b.n	8000424 <Audio_Process+0x70>
	 		break;
 800041c:	bf00      	nop
 800041e:	e002      	b.n	8000426 <Audio_Process+0x72>
	 	 	 break;
 8000420:	bf00      	nop
 8000422:	e000      	b.n	8000426 <Audio_Process+0x72>
	 		 break;
 8000424:	bf00      	nop

	 }
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	20000020 	.word	0x20000020
 8000430:	40026410 	.word	0x40026410
 8000434:	40012000 	.word	0x40012000
 8000438:	200138a4 	.word	0x200138a4

0800043c <AUDIO_DMA2_Stream0_Callback>:

}


void AUDIO_DMA2_Stream0_Callback(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* Check transfer complete flag */
  if(DMA_LISR_TCIF0 == (DMA_LISR_TCIF0 & DMA2->LISR))
 8000440:	4b08      	ldr	r3, [pc, #32]	; (8000464 <AUDIO_DMA2_Stream0_Callback+0x28>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	f003 0320 	and.w	r3, r3, #32
 8000448:	2b20      	cmp	r3, #32
 800044a:	d105      	bne.n	8000458 <AUDIO_DMA2_Stream0_Callback+0x1c>
  {
    /* Clear all interrupt flags */
    DMA2->LIFCR = (DMA_LIFCR_CFEIF0 | DMA_LIFCR_CDMEIF0 | DMA_LIFCR_CTEIF0
 800044c:	4b05      	ldr	r3, [pc, #20]	; (8000464 <AUDIO_DMA2_Stream0_Callback+0x28>)
 800044e:	223d      	movs	r2, #61	; 0x3d
 8000450:	609a      	str	r2, [r3, #8]
        | DMA_LIFCR_CHTIF0 | DMA_LIFCR_CTCIF0);

    /* Set Recording finished flag */
    recordingFinished = 1;
 8000452:	4b05      	ldr	r3, [pc, #20]	; (8000468 <AUDIO_DMA2_Stream0_Callback+0x2c>)
 8000454:	2201      	movs	r2, #1
 8000456:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* Do nothing, this interrupt is not handled */
  }
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40026400 	.word	0x40026400
 8000468:	200138a4 	.word	0x200138a4

0800046c <Gpio_Out_init>:
//Led Led_State=Red_Led;

//GPIOD HAVE AHB1  IS WORKING ON 84MH in Max
// GPIOD [D0 ,D1]  as output
void Gpio_Out_init(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
	// clock configuration
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN ;
 8000470:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <Gpio_Out_init+0x70>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000474:	4a19      	ldr	r2, [pc, #100]	; (80004dc <Gpio_Out_init+0x70>)
 8000476:	f043 0308 	orr.w	r3, r3, #8
 800047a:	6313      	str	r3, [r2, #48]	; 0x30
	// select direction of gpio as output
	GPIOD->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1)  ;
 800047c:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <Gpio_Out_init+0x74>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a17      	ldr	r2, [pc, #92]	; (80004e0 <Gpio_Out_init+0x74>)
 8000482:	f023 030f 	bic.w	r3, r3, #15
 8000486:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0)  ;
 8000488:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <Gpio_Out_init+0x74>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a14      	ldr	r2, [pc, #80]	; (80004e0 <Gpio_Out_init+0x74>)
 800048e:	f043 0305 	orr.w	r3, r3, #5
 8000492:	6013      	str	r3, [r2, #0]
	// select two pin as  push pull mean the output is "1" or "0"
	GPIOD->OTYPER &= ~(GPIO_OTYPER_OT0 |GPIO_OTYPER_OT1  );
 8000494:	4b12      	ldr	r3, [pc, #72]	; (80004e0 <Gpio_Out_init+0x74>)
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	4a11      	ldr	r2, [pc, #68]	; (80004e0 <Gpio_Out_init+0x74>)
 800049a:	f023 0303 	bic.w	r3, r3, #3
 800049e:	6053      	str	r3, [r2, #4]
	// the output speed is high speed (10)
	GPIOD->OSPEEDR |= (GPIO_OSPEEDR_OSPEED0_1 | GPIO_OSPEEDR_OSPEED1_1);
 80004a0:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <Gpio_Out_init+0x74>)
 80004a2:	689b      	ldr	r3, [r3, #8]
 80004a4:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <Gpio_Out_init+0x74>)
 80004a6:	f043 030a 	orr.w	r3, r3, #10
 80004aa:	6093      	str	r3, [r2, #8]

	/* Enable SYSCFG clock */
	RCC->APB2ENR |= RCC_APB2LPENR_SYSCFGLPEN;
 80004ac:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <Gpio_Out_init+0x70>)
 80004ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004b0:	4a0a      	ldr	r2, [pc, #40]	; (80004dc <Gpio_Out_init+0x70>)
 80004b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004b6:	6453      	str	r3, [r2, #68]	; 0x44

	//Compensation Cell for high speed output
	SYSCFG->CMPCR |= SYSCFG_CMPCR_CMP_PD  ;
 80004b8:	4b0a      	ldr	r3, [pc, #40]	; (80004e4 <Gpio_Out_init+0x78>)
 80004ba:	6a1b      	ldr	r3, [r3, #32]
 80004bc:	4a09      	ldr	r2, [pc, #36]	; (80004e4 <Gpio_Out_init+0x78>)
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	6213      	str	r3, [r2, #32]
//		 //nothing
//	 }


     /* Select no pull */
     GPIOD->PUPDR &= ~(GPIO_PUPDR_PUPDR0|GPIO_PUPDR_PUPDR1);
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <Gpio_Out_init+0x74>)
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	4a05      	ldr	r2, [pc, #20]	; (80004e0 <Gpio_Out_init+0x74>)
 80004ca:	f023 030f 	bic.w	r3, r3, #15
 80004ce:	60d3      	str	r3, [r2, #12]





}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40023800 	.word	0x40023800
 80004e0:	40020c00 	.word	0x40020c00
 80004e4:	40013800 	.word	0x40013800

080004e8 <Gpio_In_Init>:


//GPIOC [C1] as input interrupt with EXtI1
void Gpio_In_Init(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
	/* Enable post GPIOC clock in RCC */
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <Gpio_In_Init+0x40>)
 80004ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f0:	4a0d      	ldr	r2, [pc, #52]	; (8000528 <Gpio_In_Init+0x40>)
 80004f2:	f043 0304 	orr.w	r3, r3, #4
 80004f6:	6313      	str	r3, [r2, #48]	; 0x30

		/* Select input mode for PC1 */
		GPIOC->MODER &= ~(GPIO_MODER_MODER1);
 80004f8:	4b0c      	ldr	r3, [pc, #48]	; (800052c <Gpio_In_Init+0x44>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a0b      	ldr	r2, [pc, #44]	; (800052c <Gpio_In_Init+0x44>)
 80004fe:	f023 030c 	bic.w	r3, r3, #12
 8000502:	6013      	str	r3, [r2, #0]

		/* Select pull down(10)  */
		GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD1);
 8000504:	4b09      	ldr	r3, [pc, #36]	; (800052c <Gpio_In_Init+0x44>)
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	4a08      	ldr	r2, [pc, #32]	; (800052c <Gpio_In_Init+0x44>)
 800050a:	f023 030c 	bic.w	r3, r3, #12
 800050e:	60d3      	str	r3, [r2, #12]
		GPIOC->PUPDR |=  (GPIO_PUPDR_PUPD1_1);
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <Gpio_In_Init+0x44>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	4a05      	ldr	r2, [pc, #20]	; (800052c <Gpio_In_Init+0x44>)
 8000516:	f043 0308 	orr.w	r3, r3, #8
 800051a:	60d3      	str	r3, [r2, #12]

}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40023800 	.word	0x40023800
 800052c:	40020800 	.word	0x40020800

08000530 <Inp_ExtI_Init>:


void Inp_ExtI_Init(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

	  /* Enable SYSCFG clock */
	  RCC->APB2ENR |= RCC_APB2LPENR_SYSCFGLPEN;
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <Inp_ExtI_Init+0x58>)
 8000536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000538:	4a13      	ldr	r2, [pc, #76]	; (8000588 <Inp_ExtI_Init+0x58>)
 800053a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800053e:	6453      	str	r3, [r2, #68]	; 0x44

	  /* Map PC1 to EXTI1 */
	  SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI1_PC;
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <Inp_ExtI_Init+0x5c>)
 8000542:	689b      	ldr	r3, [r3, #8]
 8000544:	4a11      	ldr	r2, [pc, #68]	; (800058c <Inp_ExtI_Init+0x5c>)
 8000546:	f043 0320 	orr.w	r3, r3, #32
 800054a:	6093      	str	r3, [r2, #8]

	  /* Enable rising edge trigger */
	  EXTI->RTSR |= EXTI_RTSR_TR1;
 800054c:	4b10      	ldr	r3, [pc, #64]	; (8000590 <Inp_ExtI_Init+0x60>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	4a0f      	ldr	r2, [pc, #60]	; (8000590 <Inp_ExtI_Init+0x60>)
 8000552:	f043 0302 	orr.w	r3, r3, #2
 8000556:	6093      	str	r3, [r2, #8]
	  /* Disable falling edge trigger */
	  EXTI->FTSR &= ~(EXTI_FTSR_TR1);
 8000558:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <Inp_ExtI_Init+0x60>)
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	4a0c      	ldr	r2, [pc, #48]	; (8000590 <Inp_ExtI_Init+0x60>)
 800055e:	f023 0302 	bic.w	r3, r3, #2
 8000562:	60d3      	str	r3, [r2, #12]
	  /* Enable interrupt line (UnMasking)*/
	  EXTI->IMR |= EXTI_IMR_MR1;
 8000564:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <Inp_ExtI_Init+0x60>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a09      	ldr	r2, [pc, #36]	; (8000590 <Inp_ExtI_Init+0x60>)
 800056a:	f043 0302 	orr.w	r3, r3, #2
 800056e:	6013      	str	r3, [r2, #0]
	  /* Enable event line (UnMasking) */
	  EXTI->EMR |= EXTI_EMR_MR1;
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <Inp_ExtI_Init+0x60>)
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <Inp_ExtI_Init+0x60>)
 8000576:	f043 0302 	orr.w	r3, r3, #2
 800057a:	6053      	str	r3, [r2, #4]



}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40023800 	.word	0x40023800
 800058c:	40013800 	.word	0x40013800
 8000590:	40013c00 	.word	0x40013c00

08000594 <Gpio_on>:


void Gpio_on(Led Led_state)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	switch( Led_state)
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d002      	beq.n	80005aa <Gpio_on+0x16>
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d004      	beq.n	80005b2 <Gpio_on+0x1e>
				break;
		case(Red_Led):
		    GPIOD->BSRR = (GPIO_BSRR_BS1 );
				break;
		default:
			break;
 80005a8:	e007      	b.n	80005ba <Gpio_on+0x26>
		    GPIOD->BSRR = (GPIO_BSRR_BS0 );
 80005aa:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <Gpio_on+0x34>)
 80005ac:	2201      	movs	r2, #1
 80005ae:	619a      	str	r2, [r3, #24]
				break;
 80005b0:	e003      	b.n	80005ba <Gpio_on+0x26>
		    GPIOD->BSRR = (GPIO_BSRR_BS1 );
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <Gpio_on+0x34>)
 80005b4:	2202      	movs	r2, #2
 80005b6:	619a      	str	r2, [r3, #24]
				break;
 80005b8:	bf00      	nop

	}



}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	40020c00 	.word	0x40020c00

080005cc <Gpio_off>:
void Gpio_off(Led Led_state)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]

	switch( Led_state)
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d002      	beq.n	80005e2 <Gpio_off+0x16>
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d005      	beq.n	80005ec <Gpio_off+0x20>
					break;
			case(Red_Led):
				GPIOD->BSRR = (GPIO_BSRR_BR1 );
					break;
			default:
				break;
 80005e0:	e009      	b.n	80005f6 <Gpio_off+0x2a>
				GPIOD->BSRR = (GPIO_BSRR_BR0 );
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <Gpio_off+0x38>)
 80005e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005e8:	619a      	str	r2, [r3, #24]
					break;
 80005ea:	e004      	b.n	80005f6 <Gpio_off+0x2a>
				GPIOD->BSRR = (GPIO_BSRR_BR1 );
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <Gpio_off+0x38>)
 80005ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80005f2:	619a      	str	r2, [r3, #24]
					break;
 80005f4:	bf00      	nop
		}
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40020c00 	.word	0x40020c00

08000608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	60d3      	str	r3, [r2, #12]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800065a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800065e:	2b00      	cmp	r3, #0
 8000660:	db0b      	blt.n	800067a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	f003 021f 	and.w	r2, r3, #31
 8000668:	4907      	ldr	r1, [pc, #28]	; (8000688 <__NVIC_EnableIRQ+0x38>)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	095b      	lsrs	r3, r3, #5
 8000670:	2001      	movs	r0, #1
 8000672:	fa00 f202 	lsl.w	r2, r0, r2
 8000676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	e000e100 	.word	0xe000e100

0800068c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	6039      	str	r1, [r7, #0]
 8000696:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069c:	2b00      	cmp	r3, #0
 800069e:	db0a      	blt.n	80006b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	490c      	ldr	r1, [pc, #48]	; (80006d8 <__NVIC_SetPriority+0x4c>)
 80006a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006aa:	0112      	lsls	r2, r2, #4
 80006ac:	b2d2      	uxtb	r2, r2
 80006ae:	440b      	add	r3, r1
 80006b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b4:	e00a      	b.n	80006cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	b2da      	uxtb	r2, r3
 80006ba:	4908      	ldr	r1, [pc, #32]	; (80006dc <__NVIC_SetPriority+0x50>)
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	f003 030f 	and.w	r3, r3, #15
 80006c2:	3b04      	subs	r3, #4
 80006c4:	0112      	lsls	r2, r2, #4
 80006c6:	b2d2      	uxtb	r2, r2
 80006c8:	440b      	add	r3, r1
 80006ca:	761a      	strb	r2, [r3, #24]
}
 80006cc:	bf00      	nop
 80006ce:	370c      	adds	r7, #12
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000e100 	.word	0xe000e100
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <Nvic_Init>:




void Nvic_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

	//set Group of Priority
	/* bits[3:0] are the sub-priority,
	bits[7:4] are the pre-empt priority */
	 NVIC_SetPriorityGrouping(3);
 80006e4:	2003      	movs	r0, #3
 80006e6:	f7ff ff8f 	bl	8000608 <__NVIC_SetPriorityGrouping>



	 //Set Priority
	 NVIC_SetPriority(SysTick_IRQn, 0);
 80006ea:	2100      	movs	r1, #0
 80006ec:	f04f 30ff 	mov.w	r0, #4294967295
 80006f0:	f7ff ffcc 	bl	800068c <__NVIC_SetPriority>
	 NVIC_SetPriority(EXTI1_IRQn, 1);
 80006f4:	2101      	movs	r1, #1
 80006f6:	2007      	movs	r0, #7
 80006f8:	f7ff ffc8 	bl	800068c <__NVIC_SetPriority>
	 NVIC_SetPriority(  DMA2_Stream0_IRQn, 2);
 80006fc:	2102      	movs	r1, #2
 80006fe:	2038      	movs	r0, #56	; 0x38
 8000700:	f7ff ffc4 	bl	800068c <__NVIC_SetPriority>
	// NVIC_SetPriority( TIM3_IRQn , 2);


	 //Enabling IRQn
	// NVIC_EnableIRQ(SysTick_IRQn);  //idon't need to be configured is system clock
	 NVIC_EnableIRQ(EXTI1_IRQn);
 8000704:	2007      	movs	r0, #7
 8000706:	f7ff ffa3 	bl	8000650 <__NVIC_EnableIRQ>
	 NVIC_EnableIRQ( DMA2_Stream0_IRQn);
 800070a:	2038      	movs	r0, #56	; 0x38
 800070c:	f7ff ffa0 	bl	8000650 <__NVIC_EnableIRQ>





}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}

08000714 <__NVIC_SetPriority>:
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	db0a      	blt.n	800073e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	490c      	ldr	r1, [pc, #48]	; (8000760 <__NVIC_SetPriority+0x4c>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	440b      	add	r3, r1
 8000738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800073c:	e00a      	b.n	8000754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4908      	ldr	r1, [pc, #32]	; (8000764 <__NVIC_SetPriority+0x50>)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	3b04      	subs	r3, #4
 800074c:	0112      	lsls	r2, r2, #4
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	440b      	add	r3, r1
 8000752:	761a      	strb	r2, [r3, #24]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000e100 	.word	0xe000e100
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000778:	d301      	bcc.n	800077e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800077a:	2301      	movs	r3, #1
 800077c:	e00f      	b.n	800079e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077e:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <SysTick_Config+0x40>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000786:	210f      	movs	r1, #15
 8000788:	f04f 30ff 	mov.w	r0, #4294967295
 800078c:	f7ff ffc2 	bl	8000714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <SysTick_Config+0x40>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000796:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <SysTick_Config+0x40>)
 8000798:	2207      	movs	r2, #7
 800079a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	e000e010 	.word	0xe000e010

080007ac <SysTick_IncrementTicks_cb>:
 * @note
 * @param   None
 * @retval  None
 */
void SysTick_IncrementTicks_cb(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  ++SysTickCounter;
 80007b0:	4b04      	ldr	r3, [pc, #16]	; (80007c4 <SysTick_IncrementTicks_cb+0x18>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	4a03      	ldr	r2, [pc, #12]	; (80007c4 <SysTick_IncrementTicks_cb+0x18>)
 80007b8:	6013      	str	r3, [r2, #0]
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	200138a8 	.word	0x200138a8

080007c8 <SysTick_Init>:
 */



void SysTick_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
  uint32_t returnCode;

  /* Update clock configuration */
  SystemCoreClockUpdate();
 80007ce:	f000 f8a1 	bl	8000914 <SystemCoreClockUpdate>

  /* Check clock configuration */
  if(SystemCoreClock != (uint32_t) 16000000)
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <SysTick_Init+0x3c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a0c      	ldr	r2, [pc, #48]	; (8000808 <SysTick_Init+0x40>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d000      	beq.n	80007de <SysTick_Init+0x16>
  {
    /* Clock configuration is not OK */
    while(1)
 80007dc:	e7fe      	b.n	80007dc <SysTick_Init+0x14>
  {
    /* Clock configuration is OK */
  }

  /* Configure SysTick to generate an interrupt every millisecond */
  returnCode = SysTick_Config(SystemCoreClock / 1000);
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <SysTick_Init+0x3c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <SysTick_Init+0x44>)
 80007e4:	fba2 2303 	umull	r2, r3, r2, r3
 80007e8:	099b      	lsrs	r3, r3, #6
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff ffbc 	bl	8000768 <SysTick_Config>
 80007f0:	6078      	str	r0, [r7, #4]

  /* Check return code for errors */
  if (returnCode != 0)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d000      	beq.n	80007fa <SysTick_Init+0x32>
  {
    /* SysTick configuration failed */
    while(1)
 80007f8:	e7fe      	b.n	80007f8 <SysTick_Init+0x30>
  {
    /* Do nothing, SysTick configuration OK */
  }


}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000000 	.word	0x20000000
 8000808:	00f42400 	.word	0x00f42400
 800080c:	10624dd3 	.word	0x10624dd3

08000810 <main>:
 * @note
 * @param   none
 * @retval  none
 */
int main(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0




	/******************Basic_Initializations*************/
	SysTick_Init();  //must Systick is before Nvic to alolow the Systick to be configured without ant crash
 8000814:	f7ff ffd8 	bl	80007c8 <SysTick_Init>
	Nvic_Init();
 8000818:	f7ff ff62 	bl	80006e0 <Nvic_Init>
	Gpio_Out_init();
 800081c:	f7ff fe26 	bl	800046c <Gpio_Out_init>
	Gpio_In_Init();
 8000820:	f7ff fe62 	bl	80004e8 <Gpio_In_Init>
	Inp_ExtI_Init();
 8000824:	f7ff fe84 	bl	8000530 <Inp_ExtI_Init>

	/******************* Audio_file*********************/
	Audio_Adc_Init();
 8000828:	f7ff fcd4 	bl	80001d4 <Audio_Adc_Init>
	Audio_Timer_Init();
 800082c:	f7ff fd92 	bl	8000354 <Audio_Timer_Init>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000830:	b662      	cpsie	i
}
 8000832:	bf00      	nop
	__enable_irq();
  /* Infinite loop */
  while(1)
  {

	  Audio_Process();
 8000834:	f7ff fdbe 	bl	80003b4 <Audio_Process>
 8000838:	e7fc      	b.n	8000834 <main+0x24>

0800083a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800083e:	e7fe      	b.n	800083e <NMI_Handler+0x4>

08000840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <HardFault_Handler+0x4>

08000846 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <MemManage_Handler+0x4>

0800084c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <BusFault_Handler+0x4>

08000852 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <UsageFault_Handler+0x4>

08000858 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr

08000882 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	SysTick_IncrementTicks_cb();
 8000886:	f7ff ff91 	bl	80007ac <SysTick_IncrementTicks_cb>
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}

0800088e <EXTI1_IRQHandler>:




void EXTI1_IRQHandler (void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

	//ExtI1_Callback_Flash();



}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler (void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	AUDIO_DMA2_Stream0_Callback();
 80008a0:	f7ff fdcc 	bl	800043c <AUDIO_DMA2_Stream0_Callback>

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <SystemInit+0x60>)
 80008ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b2:	4a15      	ldr	r2, [pc, #84]	; (8000908 <SystemInit+0x60>)
 80008b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <SystemInit+0x64>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a12      	ldr	r2, [pc, #72]	; (800090c <SystemInit+0x64>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80008c8:	4b10      	ldr	r3, [pc, #64]	; (800090c <SystemInit+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <SystemInit+0x64>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a0e      	ldr	r2, [pc, #56]	; (800090c <SystemInit+0x64>)
 80008d4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80008d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80008de:	4b0b      	ldr	r3, [pc, #44]	; (800090c <SystemInit+0x64>)
 80008e0:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <SystemInit+0x68>)
 80008e2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <SystemInit+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a08      	ldr	r2, [pc, #32]	; (800090c <SystemInit+0x64>)
 80008ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <SystemInit+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <SystemInit+0x60>)
 80008f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008fc:	609a      	str	r2, [r3, #8]
#endif
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	e000ed00 	.word	0xe000ed00
 800090c:	40023800 	.word	0x40023800
 8000910:	24003010 	.word	0x24003010

08000914 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b087      	sub	sp, #28
 8000918:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	2302      	movs	r3, #2
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	2300      	movs	r3, #0
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	2302      	movs	r3, #2
 800092c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800092e:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <SystemCoreClockUpdate+0xec>)
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	f003 030c 	and.w	r3, r3, #12
 8000936:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	2b08      	cmp	r3, #8
 800093c:	d011      	beq.n	8000962 <SystemCoreClockUpdate+0x4e>
 800093e:	693b      	ldr	r3, [r7, #16]
 8000940:	2b08      	cmp	r3, #8
 8000942:	d844      	bhi.n	80009ce <SystemCoreClockUpdate+0xba>
 8000944:	693b      	ldr	r3, [r7, #16]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d003      	beq.n	8000952 <SystemCoreClockUpdate+0x3e>
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	2b04      	cmp	r3, #4
 800094e:	d004      	beq.n	800095a <SystemCoreClockUpdate+0x46>
 8000950:	e03d      	b.n	80009ce <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000952:	4b2c      	ldr	r3, [pc, #176]	; (8000a04 <SystemCoreClockUpdate+0xf0>)
 8000954:	4a2c      	ldr	r2, [pc, #176]	; (8000a08 <SystemCoreClockUpdate+0xf4>)
 8000956:	601a      	str	r2, [r3, #0]
      break;
 8000958:	e03d      	b.n	80009d6 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800095a:	4b2a      	ldr	r3, [pc, #168]	; (8000a04 <SystemCoreClockUpdate+0xf0>)
 800095c:	4a2b      	ldr	r2, [pc, #172]	; (8000a0c <SystemCoreClockUpdate+0xf8>)
 800095e:	601a      	str	r2, [r3, #0]
      break;
 8000960:	e039      	b.n	80009d6 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000962:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <SystemCoreClockUpdate+0xec>)
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	0d9b      	lsrs	r3, r3, #22
 8000968:	f003 0301 	and.w	r3, r3, #1
 800096c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800096e:	4b24      	ldr	r3, [pc, #144]	; (8000a00 <SystemCoreClockUpdate+0xec>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000976:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d00c      	beq.n	8000998 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800097e:	4a23      	ldr	r2, [pc, #140]	; (8000a0c <SystemCoreClockUpdate+0xf8>)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	4a1e      	ldr	r2, [pc, #120]	; (8000a00 <SystemCoreClockUpdate+0xec>)
 8000988:	6852      	ldr	r2, [r2, #4]
 800098a:	0992      	lsrs	r2, r2, #6
 800098c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000990:	fb02 f303 	mul.w	r3, r2, r3
 8000994:	617b      	str	r3, [r7, #20]
 8000996:	e00b      	b.n	80009b0 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000998:	4a1b      	ldr	r2, [pc, #108]	; (8000a08 <SystemCoreClockUpdate+0xf4>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a0:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <SystemCoreClockUpdate+0xec>)
 80009a2:	6852      	ldr	r2, [r2, #4]
 80009a4:	0992      	lsrs	r2, r2, #6
 80009a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009aa:	fb02 f303 	mul.w	r3, r2, r3
 80009ae:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <SystemCoreClockUpdate+0xec>)
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	0c1b      	lsrs	r3, r3, #16
 80009b6:	f003 0303 	and.w	r3, r3, #3
 80009ba:	3301      	adds	r3, #1
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80009c0:	697a      	ldr	r2, [r7, #20]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c8:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <SystemCoreClockUpdate+0xf0>)
 80009ca:	6013      	str	r3, [r2, #0]
      break;
 80009cc:	e003      	b.n	80009d6 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <SystemCoreClockUpdate+0xf0>)
 80009d0:	4a0d      	ldr	r2, [pc, #52]	; (8000a08 <SystemCoreClockUpdate+0xf4>)
 80009d2:	601a      	str	r2, [r3, #0]
      break;
 80009d4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <SystemCoreClockUpdate+0xec>)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	091b      	lsrs	r3, r3, #4
 80009dc:	f003 030f 	and.w	r3, r3, #15
 80009e0:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <SystemCoreClockUpdate+0xfc>)
 80009e2:	5cd3      	ldrb	r3, [r2, r3]
 80009e4:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80009e6:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <SystemCoreClockUpdate+0xf0>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	fa22 f303 	lsr.w	r3, r2, r3
 80009f0:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <SystemCoreClockUpdate+0xf0>)
 80009f2:	6013      	str	r3, [r2, #0]
}
 80009f4:	bf00      	nop
 80009f6:	371c      	adds	r7, #28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	40023800 	.word	0x40023800
 8000a04:	20000000 	.word	0x20000000
 8000a08:	00f42400 	.word	0x00f42400
 8000a0c:	017d7840 	.word	0x017d7840
 8000a10:	08000acc 	.word	0x08000acc

08000a14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a14:	480e      	ldr	r0, [pc, #56]	; (8000a50 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000a16:	4685      	mov	sp, r0
  CPSID i
 8000a18:	b672      	cpsid	i
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a1a:	f7ff ff45 	bl	80008a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a1e:	480d      	ldr	r0, [pc, #52]	; (8000a54 <LoopForever+0x8>)
  ldr r1, =_edata
 8000a20:	490d      	ldr	r1, [pc, #52]	; (8000a58 <LoopForever+0xc>)
  ldr r2, =_sidata
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <LoopForever+0x10>)
  movs r3, #0
 8000a24:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a26:	e002      	b.n	8000a2e <LoopCopyDataInit>

08000a28 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a28:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2c:	3304      	adds	r3, #4

08000a2e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a2e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a30:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a32:	d3f9      	bcc.n	8000a28 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a34:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <LoopForever+0x14>)
  ldr r4, =_ebss
 8000a36:	4c0b      	ldr	r4, [pc, #44]	; (8000a64 <LoopForever+0x18>)
  movs r3, #0
 8000a38:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3a:	e001      	b.n	8000a40 <LoopFillZerobss>

08000a3c <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3e:	3204      	adds	r2, #4

08000a40 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a40:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a42:	d3fb      	bcc.n	8000a3c <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a44:	f000 f812 	bl	8000a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a48:	f7ff fee2 	bl	8000810 <main>

08000a4c <LoopForever>:

LoopForever:
  b LoopForever
 8000a4c:	e7fe      	b.n	8000a4c <LoopForever>
 8000a4e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000a50:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a58:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000a5c:	08000ae4 	.word	0x08000ae4
  ldr r2, =_sbss
 8000a60:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000a64:	200138ac 	.word	0x200138ac

08000a68 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a68:	e7fe      	b.n	8000a68 <ADC_IRQHandler>
	...

08000a6c <__libc_init_array>:
 8000a6c:	b570      	push	{r4, r5, r6, lr}
 8000a6e:	4d0d      	ldr	r5, [pc, #52]	; (8000aa4 <__libc_init_array+0x38>)
 8000a70:	4c0d      	ldr	r4, [pc, #52]	; (8000aa8 <__libc_init_array+0x3c>)
 8000a72:	1b64      	subs	r4, r4, r5
 8000a74:	10a4      	asrs	r4, r4, #2
 8000a76:	2600      	movs	r6, #0
 8000a78:	42a6      	cmp	r6, r4
 8000a7a:	d109      	bne.n	8000a90 <__libc_init_array+0x24>
 8000a7c:	4d0b      	ldr	r5, [pc, #44]	; (8000aac <__libc_init_array+0x40>)
 8000a7e:	4c0c      	ldr	r4, [pc, #48]	; (8000ab0 <__libc_init_array+0x44>)
 8000a80:	f000 f818 	bl	8000ab4 <_init>
 8000a84:	1b64      	subs	r4, r4, r5
 8000a86:	10a4      	asrs	r4, r4, #2
 8000a88:	2600      	movs	r6, #0
 8000a8a:	42a6      	cmp	r6, r4
 8000a8c:	d105      	bne.n	8000a9a <__libc_init_array+0x2e>
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a94:	4798      	blx	r3
 8000a96:	3601      	adds	r6, #1
 8000a98:	e7ee      	b.n	8000a78 <__libc_init_array+0xc>
 8000a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a9e:	4798      	blx	r3
 8000aa0:	3601      	adds	r6, #1
 8000aa2:	e7f2      	b.n	8000a8a <__libc_init_array+0x1e>
 8000aa4:	08000adc 	.word	0x08000adc
 8000aa8:	08000adc 	.word	0x08000adc
 8000aac:	08000adc 	.word	0x08000adc
 8000ab0:	08000ae0 	.word	0x08000ae0

08000ab4 <_init>:
 8000ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab6:	bf00      	nop
 8000ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aba:	bc08      	pop	{r3}
 8000abc:	469e      	mov	lr, r3
 8000abe:	4770      	bx	lr

08000ac0 <_fini>:
 8000ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ac2:	bf00      	nop
 8000ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ac6:	bc08      	pop	{r3}
 8000ac8:	469e      	mov	lr, r3
 8000aca:	4770      	bx	lr
